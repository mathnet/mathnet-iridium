<Type Name="Quaternion" FullName="MathNet.Numerics.Quaternion">
  <TypeSignature Language="C#" Value="public struct Quaternion : ICloneable, IComparable" />
  <AssemblyInfo>
    <AssemblyName>MathNet.Iridium</AssemblyName>
    <AssemblyVersion>1.0.0.8645</AssemblyVersion>
    <AssemblyVersion>2008.8.16.470</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Quaternion Number.</summary>
    <remarks>
            http://en.wikipedia.org/wiki/Quaternion
            http://de.wikipedia.org/wiki/Quaternion
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Quaternion (double real, double imagX, double imagY, double imagZ);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="real" Type="System.Double" />
        <Parameter Name="imagX" Type="System.Double" />
        <Parameter Name="imagY" Type="System.Double" />
        <Parameter Name="imagZ" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="real">To be added.</param>
        <param name="imagX">To be added.</param>
        <param name="imagY">To be added.</param>
        <param name="imagZ">To be added.</param>
        <summary>
            Create a quarternion.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public double Abs { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the standard euclidean length |q| = sqrt(||q||) of the quaternion q: the square root of the sum of the squares of the four components.
            Q may then be represented as q = r*(cos(phi) + u * sin(phi)) = r*exp(phi*u) where u is the unit vector and phi the argument of q.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Add (MathNet.Numerics.Quaternion q);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q">To be added.</param>
        <summary>
            Add a quaternion to this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Add (double r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>
            Add a floating point number to this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arg">
      <MemberSignature Language="C#" Value="public double Arg { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the argument phi = arg(q) of the quaternion q, such that q = r*(cos(phi) + u * sin(phi)) = r*exp(phi*u) where r is the absolute and u the unit vector of q.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a copy of this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>
            Compares this quaternion with another quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Conjugate ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Conjugate this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Distance">
      <MemberSignature Language="C#" Value="public static double Distance (MathNet.Numerics.Quaternion a, MathNet.Numerics.Quaternion b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="b" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>
            Returns the distance |a-b| of two quaternions, forming a metric space.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Divide (MathNet.Numerics.Quaternion q);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q">To be added.</param>
        <summary>
            Multiplies a Quaternion with the inverse of another
            Quaternion (q*q<sup>-1</sup>). Note that for Quaternions
            q*q<sup>-1</sup> is not the same then q<sup>-1</sup>*q,
            because this will lead to a rotation in the other direction.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Divide (double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>
            Multiplies a Quaterion with the inverse of a real number.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Its also Possible to cast a double to a Quaternion
            and make the division afterwards. But this is less
            performant.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Exp ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Exponential Function.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImagX">
      <MemberSignature Language="C#" Value="public double ImagX { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the imaginary X part (coefficient of complex I) of the quaternion.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImagY">
      <MemberSignature Language="C#" Value="public double ImagY { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the imaginary Y part (coefficient of complex J) of the quaternion.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImagZ">
      <MemberSignature Language="C#" Value="public double ImagZ { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the imaginary Z part (coefficient of complex K) of the quaternion.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inverse">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Inverse ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Inverts this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnitQuaternion">
      <MemberSignature Language="C#" Value="public bool IsUnitQuaternion { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>True if the quaternion q is of lenght |q| = 1.</summary>
        <value>To be added.</value>
        <remarks>To normalize a quaternion to a length of 1, use the <see cref="M:MathNet.Numerics.Quaternion.Sign" /> method. All unit quaternions form a 3-sphere.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lg">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Lg ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Common Logarithm to base 10.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Ln ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Natural Logrithm to base E.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Log (double lbase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lbase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="lbase">To be added.</param>
        <summary>
            Logarithm to a given base.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Multiply (MathNet.Numerics.Quaternion q);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q">To be added.</param>
        <summary>
            Multiply a quaternion with this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Multiply (double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>
            Multiply a floating point number to this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Negate ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Negate this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm">
      <MemberSignature Language="C#" Value="public double Norm { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the norm ||q|| = |q|^2 of the quaternion q: the sum of the squares of the four components.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Addition (MathNet.Numerics.Quaternion q1, MathNet.Numerics.Quaternion q2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="q2" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="q2">To be added.</param>
        <summary>
            Add a quaternion to a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Addition (MathNet.Numerics.Quaternion q1, double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="d">To be added.</param>
        <summary>
            Add a floating point number to a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Division (MathNet.Numerics.Quaternion q1, MathNet.Numerics.Quaternion q2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="q2" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="q2">To be added.</param>
        <summary>
            Divide a quaternion by a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Division (MathNet.Numerics.Quaternion q1, double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="d">To be added.</param>
        <summary>
            Divide a quaternion by a floating point number.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_ExclusiveOr (MathNet.Numerics.Quaternion q1, MathNet.Numerics.Quaternion q2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="q2" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="q2">To be added.</param>
        <summary>
            Raise a quaternion to a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_ExclusiveOr (MathNet.Numerics.Quaternion q1, double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="d">To be added.</param>
        <summary>
            Raise a quaternion to a floating point number.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Implicit (double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>
            Convert a floating point number to a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Multiply (MathNet.Numerics.Quaternion q1, MathNet.Numerics.Quaternion q2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="q2" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="q2">To be added.</param>
        <summary>
            Multiplay a quaternion with a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Multiply (MathNet.Numerics.Quaternion q1, double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="d">To be added.</param>
        <summary>
            Multiplay a floating point number with a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Subtraction (MathNet.Numerics.Quaternion q1, MathNet.Numerics.Quaternion q2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="q2" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="q2">To be added.</param>
        <summary>
            Subtract a quaternion from a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_Subtraction (MathNet.Numerics.Quaternion q1, double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q1" Type="MathNet.Numerics.Quaternion" />
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="q1">To be added.</param>
        <param name="d">To be added.</param>
        <summary>
            Subtract a floating point number from a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_UnaryNegation (MathNet.Numerics.Quaternion q);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q">To be added.</param>
        <summary>
            Negate a quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static MathNet.Numerics.Quaternion op_UnaryPlus (MathNet.Numerics.Quaternion q);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q">To be added.</param>
        <summary>
            (nop)
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Pow (MathNet.Numerics.Quaternion power);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <summary>
            Raise the quaternion to a given power.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Pow (double power);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <summary>
            Raise the quaternion to a given power.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public double Real { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the real part of the quaternion.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scalar">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Scalar ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a new Quaternion q with the Scalar part only.
            If you need a Double, use the Real-Field instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Sign ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a new normalized Quaternion q with the direction of this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqr">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Sqr ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Square of the Quaternion q: q^2.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Sqrt ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Square root of the Quaternion: q^(1/2).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Subtract (MathNet.Numerics.Quaternion q);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="q" Type="MathNet.Numerics.Quaternion" />
      </Parameters>
      <Docs>
        <param name="q">To be added.</param>
        <summary>
            SUbtract a quaternion from this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Subtract (double r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>
            Subtract a floating point number from this quaternion.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnitVector">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion UnitVector ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a new normalized Quaternion u with the Vectorpart only, such that ||u|| = 1.
            Q may then be represented as q = r*(cos(phi) + u * sin(phi)) = r*exp(phi*u) where r is the absolute and phi the argument of q.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vector">
      <MemberSignature Language="C#" Value="public MathNet.Numerics.Quaternion Vector ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.8645</AssemblyVersion>
        <AssemblyVersion>2008.8.16.470</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MathNet.Numerics.Quaternion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a new Quaternion q with the Vectorpart only.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
